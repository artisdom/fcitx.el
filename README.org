#+TITLE: fcitx.el
[[http://melpa.org/#/fcitx][file:http://melpa.org/packages/fcitx-badge.svg]]
[[http://stable.melpa.org/#/fcitx][file:http://stable.melpa.org/packages/fcitx-badge.svg]]

Better [[https://github.com/fcitx/fcitx/][fcitx]] integration for Emacs.

[[./README-zh.org][中文版]]

This package provides a set of functions to make fcitx work better in Emacs.

* Setup
  Recommendation: install this package from [[http://melpa.org][melpa]].

  Or, if you like to manually install this package:
  : (add-to-list 'load-path "/path/to/fcitx.el")
  : (require 'fcitx)

  You can choose between two different setup commands:
  : M-x fcitx-default-setup
  or
  : M-x fcitx-aggressive-setup

  The differences between these two setups will be explained later.
* Features
  This package comes with a bunch of features to provide better =fcitx=
  integration for Emacs. For every feature, you can enable or disable it using
  the corresponding =*-turn-on= or =*-turn-off= command.

  To simplify the configuration, we provide two different setup commands,
  =fcitx-default-setup= and =fcitx-aggressive-setup=. They will enable different
  lists of features. You can choose the setup command that fits your need best.
  For users who want a better control, you can define and use your own setup
  command by enabling the features you want using the =*-turn-on= commands.

** Features Enabled in Both Setup Commands
   The following features are enabled in both =fcitx-default-setup= and
   =fcitx-aggressive-setup=. You don't have to do anything if you're satisfied
   with the default settings.
*** Disable Fcitx by Prefix Keys
    - *Why this feature*

      If you've enabled fcitx, then you can't easily change your buffer by =C-x b=
      because the second key, =b=, will be blocked by fcitx(and you need to press
      =enter= in order to send =b= to emacs). This feature allows you to
      temporarily disable fcitx after pressing some prefix keys you've defined.

    - *What do the pre-defined setup comamnds do*

      Both setup comamnds define =C-x= and =C-c= to be such prefix keys, which
      means fcitx will be disabled after =C-x= or =C-c= is pressed. This setting
      should be enough for most users.

    - *For Spacemacs users*

      If you're a Spacemacs user who uses it in the Emacs way(or hybrid mode), it
      is possible that you want =M-m= to be the prefix key too. You can use the
      following command to add =M-m=:
      : (fcitx-prefix-keys-add "M-m")

    - *For users who want more customizations*

      You can define the prefix keys as you want:
      : (fcitx-prefix-keys-add "C-x" "C-c" "C-h" "M-s" "M-o")

      After defining prefix keys, you need to call
      : (fcitx-prefix-keys-turn-on)
      to enable this feature.

      Of course, you can use
      : (fcitx-prefix-keys-turn-off)
      to disable this feature.
*** Evil Support
    - *Why this feature*

      This feature allows you to disable fcitx when you exit the "insert mode" and
      to reenable fcitx after enter "insert mode". Similar to [[https://github.com/vim-scripts/fcitx.vim][fcitx.vim]].

      In addition, it will also disable fcitx if you use =switch-to-buffer= or
      =other-window= to switch to a buffer which is not in "insert mode". For
      example, if you're currently in "insert mode" in buffer =A= and you've
      enabled fcitx, then you call =switch-to-buffer= to switch to another buffer
      =B=, which is currently, say, in normal mode, then fcitx will be disabled in
      buffer =B=.

    - *What do the pre-defined setup comamnds do*

      Both setup commands enable this feature. By default, =fcitx.el= consider
      both =evil-insert-state= and =evil-emacs-state= as "insert mode". Any
      transition from =evil-insert-state= or =evil-emacs-state= to any other evil
      state will disable fcitx if necessary.

    - *How to customize it*

      The evil states in which fcitx should be enabled are defined in the variable
      =fcitx-active-evil-states=. The default value is =(insert emacs)=, which
      means fcitx will be enabled if necessary when entering =evil-insert-state=
      or =evil-emacs-state=. For Spacemacs users who use its hybrid mode, you may
      also want to add hybrid mode to the list:
      : (setq fcitx-active-evil-states '(insert emacs hybrid))

    - *Bugs*

      Note that currently the Evil support is not perfect. If you come across any
      bugs, consider filing an issue or creating a pull request.

** Features Enabled *ONLY* in =fcitx-default-setup= Command
*** =M-x=, =M-!=, =M-&= and =M-:= Support
    - *Why these features*

      Usually you don't want to type Chinese when you use =M-x=, =M-!=
      (=shell-command=), =M-&= (=async-shell-command=) or =M-:=
      (=eval-expression=). You can automatically disable fcitx when you're using
      these commands.

    - *What does =fcitx-default-setup= do*

      It enables these features by calling the following commands:
      : (fcitx-M-x-turn-on)
      : (fcitx-shell-command-turn-on)
      : (fcitx-eval-expression-turn-on)

      Your =M-x= binding should be one of =execute-extended-command= (the
      default =M-x= command), =smex= , =helm-M-x= and =counsel-M-x=.

      *WARNING*: If you rebind =M-x= to =smex=, =helm-M-x=, or =counsel-M-x=,
      then you should call =fcitx-default-setup= or =fcitx-M-x-turn-on= *after*
      the key rebinding.

    - *How to customize it*

      You can enable some of the above three features by calling their
      corresponding =*-turn-on= commands, but remember if you rebind your =M-x=,
      you should call =(fcitx-M-x-turn-on)= after the key rebinding.

* Extra Functions
  These functions are not enabled in either =fcitx-default-setup= or
  =fcitx-aggressive-setup=. You need to enable them manually if you want to use
  them.
** I-search Support
   Usually when you use fcitx, you also want to I-search in Chinese, so this
   feature is not enabled by eith =fcitx-default-setup= or
   =fcitx-aggressive-setup=. If you do want to disable fcitx when using
   I-search, enable this feature explicitly by
   : (fcitx-isearch-turn-on)

** Character & Key Input Support
   If you're using =ace-pinyin=, you need to input a letter after calling
   =ace-pinyin=. =fcitx= can be automatically disabled by turning on the
   following feature:
   : (fcitx-read-funcs-turn-on)

   However, the current implementation of this feature has some problems. See
   [[https://github.com/cute-jumper/fcitx.el/issues/12][issue #12]] and [[https://github.com/cute-jumper/fcitx.el/issues/14][issue #14]].

   So when to enable this feature?
   1. If you're on *Linux* and set =fcitx-use-dbus= to be =t=, it is totally
      fine if you enable this feature. Although this feature of =fcitx.el= will
      not work as expected in all cases(see [[https://github.com/cute-jumper/fcitx.el/issues/12][issue #12]]), it does *no harm* for
      you to enable this.
   2. If you're on OS X and use Evil, the problem described in [[https://github.com/cute-jumper/fcitx.el/issues/14][issue #14]] may
      happen. You can stiil enable this feature, using the following code:
      : (fcitx-read-funcs-turn-on)
      : (fcitx-read-key-sequence-turn-off)

* D-Bus Version
  For Linux users, you can set =fcitx-use-dbus= to be =t= to speed up a little:
  : (setq fcitx-use-dbus t)

  For OSX users who use [[https://github.com/CodeFalling/fcitx-remote-for-osx][fcitx-remote-for-osx]], don't set this variable.
* TODO TODO
  - Better Evil support

  For more features, pull requests are always welcome!
